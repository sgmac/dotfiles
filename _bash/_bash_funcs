#############################
# List background processes
#   \j works similar 
############################

get_njobs() {
njobs=$(jobs | wc -l)
 if [ $njobs -gt "0" ];
 then
        echo $njobs |  sed -e 's/\([0-9]*\)/(\1)/g'
 fi
}

prompt() {
 if [ $TERM != "dumb" ];
 then 
 alias ls='ls --color=auto'
    if [ $USER == "git" ];
    then
        PS1="[${GREEN}GIT${close}${GREY}@${close}${RED}\h${close}]:{\W}\$(get_njobs)" 
    elif [ $USER == "deploys" ]; 
    then
        if [ `hostname` == "idun" ];
        then
        PS1="${YELLOW}[${close}${GREY}\u${YELLOW}@${close}${close}${GREEN}\h${close}${YELLOW}]${close}:${red}{\W}\$(get_njobs)${close}"
        else
        PS1="${YELLOW}[${close}${red}\u${YELLOW}@${close}${close}${GREEN}\h${close}${YELLOW}]${close}:${YELLOW}{\W}\$(get_njobs)${close}"
        fi
    else
     PS1="[${WHITE}\u${GREEN}@$close${close}${red}\h${close}]:{\W}\$(get_njobs)" 
    fi
fi 
} 

##############################
# Clone repository completion
##############################

clone() {
	git clone ssh://git@sgmac.com/home/git/${1} 
}
_clone() {

    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=$( cat $HOME/.repolist )

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
        return 0
    fi

}
complete -F _clone clone



#############################
# Create several repostiories
#############################

g() {
	
   [ $# -lt 1 ] && printf 'repo name missing\n' && return 126 ;
   for((i=1; i <= $#; i++))
   do
	eval repo='$'$i 
        ssh git@sgmac.com  " mkdir ${repo}.git && cd ${repo}.git && git init --bare &> /dev/null" 
	
   done
}

#############################
# Gitfy the current directory
#############################

gitfy() {
  
   g ${PWD##*/} 

cat <<-EOF > .gitignore
*~
*#
EOF
   
   git init . && git add . &&\
		 git commit -m "First commit" && \ 
                 git remote add origin ssh://git@sgmac.com/home/git/${PWD##*/}.git && \
                 git push origin master

}
############################
# Inline functions
###########################

efn() { vi $HOME/.bash_funcs; }
m2pdf() { man -t "$1" | ps2pdf - > ${1}.pdf ; }
clipit() { [ "$#" -ge 1 ] &&  cat "$1" | xclip -selection CLIPBOARD ; }

